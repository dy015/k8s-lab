apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: taskmaster
  labels:
    app: postgres
    tier: database
data:
  init.sql: |
    -- Create database (will be created by POSTGRES_DB env var)
    -- Just ensure we're using it
    \c tasks;

    -- Create tasks table
    CREATE TABLE IF NOT EXISTS tasks (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        status VARCHAR(50) DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );

    -- Create index on status for faster queries
    CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);

    -- Create trigger to update updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    DROP TRIGGER IF EXISTS update_tasks_updated_at ON tasks;
    CREATE TRIGGER update_tasks_updated_at
        BEFORE UPDATE ON tasks
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();

    -- Seed data
    INSERT INTO tasks (title, status) VALUES
        ('Setup Kubernetes cluster', 'completed'),
        ('Deploy baseline application', 'completed'),
        ('Learn pod troubleshooting', 'pending'),
        ('Master kubectl commands', 'pending'),
        ('Complete break-and-fix exercises', 'pending'),
        ('Understand Kubernetes networking', 'pending'),
        ('Configure persistent storage', 'pending')
    ON CONFLICT DO NOTHING;

    -- Grant permissions
    GRANT ALL PRIVILEGES ON DATABASE tasks TO taskuser;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO taskuser;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO taskuser;
